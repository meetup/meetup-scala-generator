package {{invokerPackage}}

/**
 * A trait to provide a consistent service bootstrapping process.
 */
trait Runner {

  /**
   * Initialize the application given the environment and any command line
   * arguments. This is where internal, service-specific bootstrapping
   * (databases, etc) should occur.
   *
   * This function returns a tuple of the initialized service object, and
   * a shutdown function that is responsible for shutting down any resources
   * started up to initialize the service object (e.g. a database connection).
   *
   * @param environment environment variables
   * @param args        command line arguments
   */
  def initializeService(environment: Map[String, String], args: Array[String]): (Service, () => Unit)

  /**
   * Set the initial readiness of the server.
   *
   * By default, the server will be immediately ready to serve traffic once initializeService is
   * complete.  If there is more complex behavior that your service requires, override this function
   * and set `KubernetesHandler.ready` to true when the server is ready.
   */
  def setInitialReadiness(): Unit = {
    KubernetesHandler.ready = true
  }
  
  final def main(args: Array[String]) {
    /* Initialize the application and server, and get shutdown function. */

    val (service, doShutdownService) = initializeService(sys.env, args)
    setInitialReadiness()
    val (server, doShutdownServer) = Server(9000, service)

    if (Thread.currentThread().getName.startsWith("run-main-")) {
      /* We're running under SBT so stay attached to the terminal and shutdown
         on key-press. */
      System.out.println(s"Server running on port ${server.getServerPort}. Press enter to terminate.")
      System.in.read()
      doShutdownServer()
      doShutdownService()
      /* Block the main thread to prevent exit until the server has shutdown. */
      server.waitTillShutdown()
    } else {
      /* Not running under SBT, or we are but under a forked JVM. In either
         case we ensure shutdown but registering our shutdown procedure as a
         shutdown hook. */
      sys.addShutdownHook {
        doShutdownServer()
        doShutdownService()
        server.waitTillShutdown()        
      }
    }

  }
}
