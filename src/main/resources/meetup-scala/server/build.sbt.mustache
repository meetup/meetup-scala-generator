enablePlugins(
  BuildInfoPlugin,
  CoverallsWrapper,
  DockerPackagePlugin,
  CommonSettingsPlugin
)

name := "{{artifactName}}"

organization := "{{artifactOrganization}}"

scalaVersion := "2.11.8"

// TODO this depends on JSON lib selection, but if we support other libs this
// can be modified.
libraryDependencies ++=
  Seq(
    "org.json4s" %% "json4s-native" % "3.4.0",
    "com.meetup" %% "json4s-java-time" % "0.0.6",
    "com.netflix.hystrix" % "hystrix-rx-netty-metrics-stream" % "1.4.23"
      exclude("io.reactivex", "rxnetty")
      exclude("com.netflix.archaius", "archaius-core"), // TODO make sure this is safe
    "io.reactivex" % "rxnetty" % "0.4.16",
    "org.scala-lang.modules" %% "scala-java8-compat" % "0.7.0",
    "com.meetup" %% "scala-logger" % "0.1.9",
    "io.reactivex" % "rxnetty" % "0.4.16",
    "org.scalatest" %% "scalatest" % "2.2.6" % "test",
    ////// [start] libs needed for scalacheck-based property testing //////////////
    // Note that both scalacheck-toolbox and scalacheck-ops have handling for java.time.
    // Consequently there are potential conflicts between the two libs, if you're not careful about imports.
    // We need support for java.time.Instant and ZonedDateTime:
    // scalacheck-toolbox does not support java.time.Instant
    // scalacheck-ops supports both in theory but has a bug for ZonedDateTime
    // Hence we depend on both.
    "com.github.alexarchambault" % "scalacheck-shapeless_1.13_2.11" % "1.1.7" % "test",
    "com.47deg" %% "scalacheck-toolbox-datetime" % "0.2.3" % "test",
    "me.jeffmay" % "scalacheck-ops_1-13_2.11" % "1.5.0" % "test"
    ////// [end] libs needed for scalacheck-based property testing //////////////
  )

resolvers += "Meetup Bintray" at "https://dl.bintray.com/meetup/maven/"
resolvers += Resolver.bintrayRepo("jeffmay", "maven")

buildInfoKeys := Seq[BuildInfoKey](name, organization, version, scalaVersion, sbtVersion)

buildInfoPackage := "{{invokerPackage}}"

initialCommands := "import {{invokerPackage}}._; import {{modelPackage}}._"

watchSources <<= (watchSources, baseDirectory) { (w, b) => w.map(_ :+ new java.io.File(b.getParent, "swagger.yaml")) }
